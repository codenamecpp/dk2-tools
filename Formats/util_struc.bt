/* -*- Mode: C; -*- */
//--------------------------------------
//--- 010 Editor v6.0.3 Binary Template
//
// File:        util_struc.bt
// Author:      ufdada
// Revision:    1.0
// Purpose:     Utility structures
//--------------------------------------

const float FLOAT32 = 4096.0;
const float DOUBLE32 = 65536.0;

typedef struct {
    int value;
} float32<read=getFloatPointValue>; 

typedef struct {
    short value;
} float16<read=getFloat16PointValue>; 

typedef struct {
    int value;
} double32<read=getDoubleValue>; 

typedef struct {
    ubyte red;
    ubyte green;
    ubyte blue;
	ubyte alpha;
} ColorRGBA<read=getColorRGBA>;

typedef struct {
    ubyte red;
    ubyte green;
    ubyte blue;
} ColorRGB<read=getColorRGB>;

typedef struct {
    int x;
    int y;
    int z;
} Vector3f<read=getVector, write=setVector>;

typedef struct {	// a vertex definition
	float x;
	float y;
	float z;
} Vec3f<read=getVector3>;

typedef struct {
	byte UNK_1 : 1;  // FIXME unknown flag
	byte FLICKER : 1;
	byte PULSE : 1;
    byte none_2 : 1;
    byte none_3 : 1;
    byte none_4 : 1;
    byte none_5 : 1;
	byte PLAYER_COLOURED : 1;
    byte none_6 : 1;
    byte none_7 : 1;
    byte none_8 : 1;
	byte COLOR_RED : 1; // If this is set, add 256 to the red value of the light
	byte COLOR_GREEN : 1; // If this is set, add 256 to the green value of the light
	byte COLOR_BLUE : 1; // If this is set, add 256 to the blue value of the light
    byte none_9 : 1;
    byte none_10 : 1;
    byte none[2];
} LightFlag;

struct Light {
  Vector3f mKPos;
  float32 radius; // float
  LightFlag flags;
  ColorRGBA color;
};

enum <ubyte> Direction {
	NORTH,
	NORTH_EAST,
	EAST,
	SOUTH_EAST,
	SOUTH,
	SOUTH_WEST,
	WEST,
	NORTH_WEST
};

enum MapType {
    GLOBALS = 0, // As in overrides the regular ones
    MAP = 100,
    TERRAIN = 110,
    ROOMS = 120,
    TRAPS = 130,
    DOORS = 140,
    KEEPER_SPELLS = 150,
    CREATURE_SPELLS = 160,
    CREATURES = 170,
    PLAYERS = 180,
    THINGS = 190,
    TRIGGERS = 210,
    LEVEL = 220,
    VARIABLES = 230,
    OBJECTS = 240,
    EFFECT_ELEMENTS = 250,
    SHOTS = 260,
    EFFECTS = 270
};

string getVector(Vector3f &vec) {
    string vector;
	SPrintf( vector, "(x=%lg, y=%lg, z=%lg)", vec.x / FLOAT32, vec.y / FLOAT32, vec.z / FLOAT32 );
	return vector;
}

string getVector3(Vec3f &vec) {
    string vector;
	SPrintf(vector, "(x=%lg, y=%lg, z=%lg)", vec.x, vec.y, vec.z);
	return vector;
}

void setVector(Vector3f &vec, string s ){
    SScanf( s, "(x=%lg, y=%lg, z=%lg)", v.x * FLOAT32, v.y * FLOAT32, v.z * FLOAT32 );
}

string getColorRGB(ColorRGB &rgb) {
    string color;
	SPrintf( color, "(r=%lg, g=%lg, b=%lg)", rgb.red, rgb.green, rgb.blue );
	return color;
}

string getColorRGBA(ColorRGBA &rgb) {
    string color;
	SPrintf( color, "(r=%lg, g=%lg, b=%lg, a=%lg)", rgb.red, rgb.green, rgb.blue, rgb.alpha );
	return color;
}

string getFloatValue(int &i) {
    string floatValue;
	SPrintf( floatValue, "%f", i / FLOAT32 );
	return floatValue;
}

string getFloatPointValue(float32 &f) {
    string floatValue;
	SPrintf( floatValue, "%lg", f.value / FLOAT32 );
	return floatValue;
}

string getFloat16PointValue(float16 &f) {
    string floatValue;
	SPrintf( floatValue, "%lg", f.value / FLOAT32 );
	return floatValue;
}

string getDoubleValue(double32 &d) {
    string doubleValue;
	SPrintf( doubleValue, "%lg", d.value / DOUBLE32 );
	return doubleValue;
}

local string corruptFileMessage = "Corrupt file. %s check failed. Expected: %i. Result: %i.\n";

int showError(string type, int expected, int result) {
    Warning( corruptFileMessage, type, expected, result);
    Printf( corruptFileMessage, type, expected, result);
    
    return -1;
}
